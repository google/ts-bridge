// Code generated by go-bindata.
// sources:
// static/index.html
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\x58\x01\x3d\x75\x29\x25\xed\xa5\xc8\x52\x2e\x5a\xa0\x87\x02\xd9\x1e\x36\xdd\x5e\x0d\x9a\x1c\x59\xb3\xa1\x48\x81\x1c\xc7\x1b\x18\x7e\xf7\x82\xa2\xec\xc8\x92\xbc\x4d\xb0\xc6\xfa\x62\x72\x38\xfc\xe6\x8f\xfc\x38\x12\x3f\x68\xa7\xe8\xb9\x05\x56\x53\x63\x96\x0b\x11\xff\x98\x91\x76\x53\x66\x60\xb3\xe5\x62\x21\x6a\x90\x7a\xb9\x60\x4c\x34\x40\x92\xa9\x5a\xfa\x00\x54\x66\x5b\xaa\xf8\xaf\x59\xb7\x60\xd0\x3e\x32\x0f\xa6\xcc\x02\x3d\x1b\x08\x35\x00\x65\xac\xf6\x50\x95\x59\x4d\xd4\x86\xbb\xa2\xa8\x9c\xa5\x90\x6f\x9c\xdb\x18\x90\x2d\x86\x5c\xb9\xa6\x40\xe5\xec\x6f\x95\x6c\xd0\x3c\x97\x1f\x24\x81\x47\x69\x7e\xfa\x4b\x39\x1b\x5e\x0f\xac\x9c\x86\x7c\x03\xd4\x68\x93\xa3\x2b\x6e\xf3\x5f\xf2\x9b\xa2\xe9\xc1\x72\xb4\x1a\x37\x8e\xb7\x68\x1f\xf3\x06\x6d\xae\x42\x0f\x1d\x94\xc7\x96\x98\x86\x0a\x3c\x0b\x5e\xbd\x16\x30\x82\x7c\x0e\xd9\x52\x14\x09\xe1\x25\x33\x56\x36\x50\x66\x4f\x08\xbb\xd6\x79\xca\x98\x72\x96\xc0\x52\x99\xed\x50\x53\x5d\x6a\x78\x42\x05\xbc\x9b\xbc\x63\x68\x91\x50\x1a\x1e\x94\x34\x50\xde\xbe\x63\xa1\xf6\x68\x1f\x39\x39\x5e\x21\x95\xd6\x25\x2f\x09\xc9\xc0\x92\x02\x5f\x7b\xd4\x1b\xb8\x63\x0d\x90\x47\xc5\xb6\xad\x96\x04\x2c\x90\xa4\x6d\x10\x45\x52\x5b\x88\x22\xd5\x6a\x21\xd6\x4e\x3f\x77\x00\x1a\x9f\x98\x32\x32\x84\x32\x6b\xb4\xe1\x46\x3e\xbb\x2d\xb1\x38\xfc\x1c\x86\xb3\x34\xe4\xbc\xc2\x2f\xa0\x79\x84\x01\xdf\xb9\xc0\x98\x48\xb3\x29\xcc\x6a\xd5\xaf\x4c\x45\x9c\x07\xe5\x9d\x31\x3d\xc4\x25\x47\x4e\xea\xde\xed\x4e\xaa\xb1\x38\xad\xb4\x73\xda\x5d\x9c\xd9\xf2\x1f\x6c\x80\x3d\x80\x47\x08\xec\x8f\xaf\x26\x26\x02\x9d\x5c\x28\x34\x3e\xf5\x21\x15\xc9\x6e\x3f\x6b\x24\xce\x9a\xeb\x2b\x78\x31\x88\x8d\x47\x3d\x74\x7b\xb4\xac\xc0\x18\x76\x1c\x70\x7e\xcb\x95\x1b\xce\x6b\xd4\xc0\x49\xae\x0d\xd0\x58\xda\xd6\xce\x42\x3c\x63\x27\x8f\x5f\x83\x7f\x13\x0d\x0c\xfc\x89\xe7\x27\xc2\x0f\xf7\x68\x49\x32\x19\x3d\x1e\x82\x91\x24\xd4\x52\xbb\x1d\xe7\x3f\xeb\x36\x63\xdd\xad\xeb\x0f\xf0\x1d\xbb\xbd\xb9\xf9\xf1\xfd\x19\x7e\xb4\x70\xa4\x87\x73\xa9\x1f\x8b\x3a\xd5\x79\x4f\x56\xab\x14\x80\x75\x96\xdb\x6d\x03\x1e\x55\x8c\x9d\xea\x6f\xc5\xf8\xd0\x9d\x89\x6b\x20\xdd\xcb\x40\xec\x53\x77\xb6\xae\x06\xf7\x3b\x11\x34\x2d\x5d\x03\xef\xe1\xc8\x03\x13\x24\x51\x8c\x4b\x11\xb5\x26\x25\x13\x74\x64\x8c\xe1\x6f\xbf\xf7\xd2\x6e\x80\xe5\x87\xc3\xeb\x0a\xac\xdf\xe0\xf3\x64\x3b\x63\x42\xf6\xdc\xbe\xdf\xe7\x0f\x24\xd5\xa3\xf6\xf8\x04\xfe\xd3\xc7\xfb\xc3\x61\x76\x03\x63\x62\xbd\x25\x72\x96\xa1\x2e\xb3\xfb\x48\xf2\xfb\x7d\xfe\xb7\x6c\xe0\x70\xc8\x86\xbe\xf4\x5a\xfd\x91\x1f\xcc\xd2\x90\xf3\x4a\xae\xcf\xe6\x0d\x5a\x9c\x08\x95\x33\xce\x83\xbe\xe0\x0a\x63\x02\x4f\x36\xfb\xe7\x82\x63\x7a\xcc\xe2\x43\x26\x0a\xbc\x10\x43\x91\x0c\xcc\xa6\xa4\x90\xb3\xe2\x11\x15\x90\x73\x86\xb0\xcd\x58\xe5\xfc\x24\x11\xcb\x7f\x11\x76\x0c\x2d\x4b\xf7\x81\xfd\xf9\xa5\x8d\x71\xf8\x11\xbd\xbc\x98\xa4\xc9\x85\x7e\x6b\x71\x4f\xc6\xaf\x01\x76\x29\xfe\xae\xe6\x32\x50\xba\x97\xc3\x80\xf7\xfb\x7a\xdb\x48\x4b\xf1\x9d\xc8\x3f\x82\x72\x5e\xe7\x2f\x9a\xd1\xab\xd9\xc8\xff\x37\xaf\x17\x8c\xbd\xc1\xc4\xf7\xc8\x47\x4f\x2c\xaf\x49\x48\xaf\xfa\x4d\x19\x99\x35\xf7\x16\x23\x57\xc8\xc9\xe9\xa5\x72\x5e\xf3\x9d\x97\xed\x1d\x5b\x7b\x90\x8f\x5c\x1a\xf3\x9e\xed\x6a\x24\xe0\xa1\x95\x0a\xee\x98\x75\xbe\x91\x66\xfc\x8e\xa5\xdf\xb9\xdf\x89\x55\x27\xdc\x37\xef\xf0\x94\x68\x23\x1c\x58\x3d\xda\x2f\x8a\x09\xd5\x8a\xa2\x8b\x6b\xf0\xd0\x0f\xf3\x74\xd6\xb6\xc4\x4e\xa5\x1f\x57\xce\xd1\x79\x57\x96\x38\xab\x13\x5f\x6c\x59\x06\x3a\xab\x95\x81\x8a\x78\x00\x45\xe8\xec\xb0\x8f\xd9\x9a\xcb\x5b\x62\x93\x6a\x30\xd0\x79\x9f\x61\x46\xd4\x76\x62\xf2\x63\x53\xbd\x41\xaa\xb7\xeb\xae\xe9\x4f\xdf\x00\xc5\xa9\xa9\xcd\x96\x5f\x59\x1c\xf1\x9f\x28\x86\x96\x44\xb1\x35\xb3\x69\x4a\xde\x76\x0d\x70\x12\x8b\x22\x25\x3d\xb6\xc8\xf1\x3b\xe7\xbf\x00\x00\x00\xff\xff\xab\x3f\xdf\x9c\xf7\x0c\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

