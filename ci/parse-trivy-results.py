"""Script to parse results from Trivy scan.

1) Reads in results from two files (json and table format) generated by Trivy.
2) Creates a GitHub issue in the given repo if any vulnerabilities were found.
3) Fails the CI build if any vulerabilities of HIGH/CRITICAL severity exist.

Both the json and table Trivy results must be created prior to running 
this script. These can be generated with:
    trivy image --format json --light --no-progress -o <OUTPUT_NAME> 
        gcr.io/cre-tools/ts-bridge
    trivy image --light  --no-progress -o <OUTPUT_NAME>
        gcr.io/cre-tools/ts-bridge

Usage:
    python3 parse-trivy-results.py <TRIVY_FILE> <COMMIT_ID> <BUILD_ID> <FULL_TAG> <REPO_NAME> <TOKEN_FILE>

"""
import json
import sys
from github import Github

CMDLINE_ARGS = 7

def load_results():
    """ Load the results from Trivy."""
    TRIVY_OUT_JSON = "{}.json".format(sys.argv[1])
    TRIVY_OUT_TABLE = "{}.table".format(sys.argv[1])
    print(TRIVY_OUT_TABLE, TRIVY_OUT_JSON)
    try:
        with open(TRIVY_OUT_JSON) as f:
            # Index is 0 because there is only one target built.
            trivy_result = json.load(f)[0]
        with open(TRIVY_OUT_TABLE) as f:
            trivy_table = f.read()
    except FileNotFoundError:
        error = ("Please run \n"
                "trivy image --format json --light --no-progress -o {} "
                "gcr.io/cre-tools/ts-bridge \n"
                "trivy image --light  --no-progress -o {} "
                "gcr.io/cre-tools/ts-bridge \n"
                ).format(TRIVY_OUT_JSON, TRIVY_OUT_TABLE)
        sys.exit(error)
    return [trivy_result, trivy_table]

def get_severity_list(vulnerabilities):
    """Filters out all the severities in a given list of vulnerabilities."""
    severity_list = [v.get('Severity') for v in vulnerabilities]
    return sorted(set(severity_list))

def get_github_repo():
    """Connects to GitHub API and returns a repo object."""
    REPO_NAME = sys.argv[5]
    with open(sys.argv[6]) as f:
        token = f.read()
    github = Github(token)
    return github.get_repo(REPO_NAME)

def create_issue(target_name, num_vulnerabilities, severity_list, table):
    """Creates a Github issue with vulnerabilities as description."""
    COMMIT_ID = sys.argv[2]
    BUILD_ID = sys.argv[3]
    FULL_TAG = sys.argv[4]
    repo = get_github_repo()

    title = ("Vulnerability [{}] found in {}: Images from commit {} cannot be "
             "released").format(",".join(severity_list), FULL_TAG, COMMIT_ID)

    intro = ("Trivy has detected {} vulnerabilities in your latest "
             "build. Please correct this issue so the new images can be "
             "published on Container Registry.\n").format(num_vulnerabilities)
    body = [intro]
    body.append("**Cloud Build ID:** {}".format(BUILD_ID))
    body.append("**Commit ID:** {}".format(COMMIT_ID))
    body.append("**Tag:** {}".format(FULL_TAG))
    body.append("**Target:** {}".format(target_name))
    body.append("```")
    body.append(table)
    body.append("```")
    body = "\n".join(body)

    new_issue = repo.create_issue(title=title, body=body)
    return new_issue.number

def check_cmdline_args():
    if len(sys.argv) != CMDLINE_ARGS:
        debug_msg = ("Usage: python3 parse-trivy-results.py <TRIVY_FILE> "
                     "<COMMIT_ID> <BUILD_ID> <FULL_TAG> <REPO_NAME>"
                     "<ACCESS_TOKEN>")
        sys.exit(debug_msg)

def main():
    check_cmdline_args()

    [trivy_result, trivy_table] = load_results()

    # Examine results to check if vulnerabilities were found
    target = trivy_result["Target"]
    vulnerabilities = trivy_result["Vulnerabilities"]
    if vulnerabilities:
        num_vulnerabilities = len(vulnerabilities)
        severity_list = get_severity_list(vulnerabilities)
        issue_number = create_issue(target, num_vulnerabilities, 
                                    severity_list, trivy_table)
        
        debug_msg = ("{} vulnerabilities of type: [{}] were found in image. "
                     "Please refer to issue: {} for details."
                    ).format(num_vulnerabilities, ",".join(severity_list), 
                             issue_number)
        print(debug_msg)

        if "HIGH" in severity_list or "CRITICAL" in severity_list:
            sys.exit("Build will be aborted and "
                     "new images will not be pushed to GCR.")
        else:
            print("Images will be published to GCR.")
    else:
        print("No vulnerabilities found. Images will be published to GCR.")

if __name__ == '__main__':
    main()
